# Makefile.in generated automatically by automake 1.5 from Makefile.am.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

@SET_MAKE@

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include
pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@
top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_HEADER = $(INSTALL_DATA)
transform = @program_transform_name@
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
AMTAR = @AMTAR@
AWK = @AWK@
CC = @CC@
CXX = @CXX@
DEPDIR = @DEPDIR@
EXEEXT = @EXEEXT@
INSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@
OBJEXT = @OBJEXT@
PACKAGE = @PACKAGE@
SDL_CFLAGS = @SDL_CFLAGS@
SDL_CONFIG = @SDL_CONFIG@
SDL_LIBS = @SDL_LIBS@
VERSION = @VERSION@
am__include = @am__include@
am__quote = @am__quote@
install_sh = @install_sh@

bin_PROGRAMS = openglad openscen

#EXTRA_PROGRAMS = openscen
openglad_SOURCES = glad.cpp button.cpp effect.cpp game.cpp gladpack.cpp \
graphlib.cpp guy.cpp help.cpp input.cpp intro.cpp living.cpp loader.cpp \
obmap.cpp pal32.cpp parser.cpp picker.cpp pixie.cpp pixien.cpp radar.cpp \
screen.cpp smooth.cpp sound.cpp stats.cpp text.cpp treasure.cpp video.cpp \
view.cpp walker.cpp weap.cpp sai2x.cpp util.cpp\
base.h button.h colors.h effect.h gladpack.h graph.h guy.h input.h living.h \
loader.h obmap.h pal32.h palettes.h parser.h picker.h pixdefs.h pixie.h \
pixien.h radar.h scen.h screen.h smooth.h soundob.h sounds.h stats.h text.h \
treasure.h video.h view.h walker.h weap.h sai2x.h util.h


openscen_SOURCES = scen.cpp effect.cpp game.cpp gladpack.cpp \
graphlib.cpp guy.cpp help.cpp input.cpp intro.cpp living.cpp loader.cpp \
obmap.cpp pal32.cpp parser.cpp pixie.cpp pixien.cpp radar.cpp \
screen.cpp smooth.cpp sound.cpp stats.cpp text.cpp treasure.cpp video.cpp \
view.cpp walker.cpp weap.cpp sai2x.cpp util.cpp\
base.h colors.h effect.h gladpack.h graph.h guy.h input.h living.h \
loader.h obmap.h pal32.h palettes.h parser.h pixdefs.h pixie.h \
pixien.h radar.h scen.h screen.h smooth.h soundob.h sounds.h stats.h text.h \
treasure.h video.h view.h walker.h weap.h sai2x.h util.h

openscen_CXXFLAGS = -DOPENSCEN
subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = config.h
CONFIG_CLEAN_FILES =
bin_PROGRAMS = openglad$(EXEEXT) openscen$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_openglad_OBJECTS = glad.$(OBJEXT) button.$(OBJEXT) effect.$(OBJEXT) \
	game.$(OBJEXT) gladpack.$(OBJEXT) graphlib.$(OBJEXT) \
	guy.$(OBJEXT) help.$(OBJEXT) input.$(OBJEXT) intro.$(OBJEXT) \
	living.$(OBJEXT) loader.$(OBJEXT) obmap.$(OBJEXT) \
	pal32.$(OBJEXT) parser.$(OBJEXT) picker.$(OBJEXT) \
	pixie.$(OBJEXT) pixien.$(OBJEXT) radar.$(OBJEXT) \
	screen.$(OBJEXT) smooth.$(OBJEXT) sound.$(OBJEXT) \
	stats.$(OBJEXT) text.$(OBJEXT) treasure.$(OBJEXT) \
	video.$(OBJEXT) view.$(OBJEXT) walker.$(OBJEXT) weap.$(OBJEXT) \
	sai2x.$(OBJEXT) util.$(OBJEXT)
openglad_OBJECTS = $(am_openglad_OBJECTS)
openglad_LDADD = $(LDADD)
openglad_DEPENDENCIES =
openglad_LDFLAGS =
am_openscen_OBJECTS = openscen-scen.$(OBJEXT) openscen-effect.$(OBJEXT) \
	openscen-game.$(OBJEXT) openscen-gladpack.$(OBJEXT) \
	openscen-graphlib.$(OBJEXT) openscen-guy.$(OBJEXT) \
	openscen-help.$(OBJEXT) openscen-input.$(OBJEXT) \
	openscen-intro.$(OBJEXT) openscen-living.$(OBJEXT) \
	openscen-loader.$(OBJEXT) openscen-obmap.$(OBJEXT) \
	openscen-pal32.$(OBJEXT) openscen-parser.$(OBJEXT) \
	openscen-pixie.$(OBJEXT) openscen-pixien.$(OBJEXT) \
	openscen-radar.$(OBJEXT) openscen-screen.$(OBJEXT) \
	openscen-smooth.$(OBJEXT) openscen-sound.$(OBJEXT) \
	openscen-stats.$(OBJEXT) openscen-text.$(OBJEXT) \
	openscen-treasure.$(OBJEXT) openscen-video.$(OBJEXT) \
	openscen-view.$(OBJEXT) openscen-walker.$(OBJEXT) \
	openscen-weap.$(OBJEXT) openscen-sai2x.$(OBJEXT) \
	openscen-util.$(OBJEXT)
openscen_OBJECTS = $(am_openscen_OBJECTS)
openscen_LDADD = $(LDADD)
openscen_DEPENDENCIES =
openscen_LDFLAGS =

DEFS = @DEFS@
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I.
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
depcomp = $(SHELL) $(top_srcdir)/depcomp
@AMDEP_TRUE@DEP_FILES = $(DEPDIR)/button.Po $(DEPDIR)/effect.Po \
@AMDEP_TRUE@	$(DEPDIR)/game.Po $(DEPDIR)/glad.Po \
@AMDEP_TRUE@	$(DEPDIR)/gladpack.Po $(DEPDIR)/graphlib.Po \
@AMDEP_TRUE@	$(DEPDIR)/guy.Po $(DEPDIR)/help.Po \
@AMDEP_TRUE@	$(DEPDIR)/input.Po $(DEPDIR)/intro.Po \
@AMDEP_TRUE@	$(DEPDIR)/living.Po $(DEPDIR)/loader.Po \
@AMDEP_TRUE@	$(DEPDIR)/obmap.Po $(DEPDIR)/openscen-effect.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-game.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-gladpack.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-graphlib.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-guy.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-help.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-input.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-intro.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-living.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-loader.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-obmap.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-pal32.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-parser.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-pixie.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-pixien.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-radar.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-sai2x.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-scen.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-screen.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-smooth.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-sound.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-stats.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-text.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-treasure.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-util.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-video.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-view.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-walker.Po \
@AMDEP_TRUE@	$(DEPDIR)/openscen-weap.Po $(DEPDIR)/pal32.Po \
@AMDEP_TRUE@	$(DEPDIR)/parser.Po $(DEPDIR)/picker.Po \
@AMDEP_TRUE@	$(DEPDIR)/pixie.Po $(DEPDIR)/pixien.Po \
@AMDEP_TRUE@	$(DEPDIR)/radar.Po $(DEPDIR)/sai2x.Po \
@AMDEP_TRUE@	$(DEPDIR)/screen.Po $(DEPDIR)/smooth.Po \
@AMDEP_TRUE@	$(DEPDIR)/sound.Po $(DEPDIR)/stats.Po \
@AMDEP_TRUE@	$(DEPDIR)/text.Po $(DEPDIR)/treasure.Po \
@AMDEP_TRUE@	$(DEPDIR)/util.Po $(DEPDIR)/video.Po \
@AMDEP_TRUE@	$(DEPDIR)/view.Po $(DEPDIR)/walker.Po \
@AMDEP_TRUE@	$(DEPDIR)/weap.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
CXXFLAGS = @CXXFLAGS@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(openglad_SOURCES) $(openscen_SOURCES)
DIST_COMMON = ./stamp-h.in Makefile.am Makefile.in config.h.in
SOURCES = $(openglad_SOURCES) $(openscen_SOURCES)

all: config.h
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && \
	  CONFIG_HEADERS= CONFIG_LINKS= \
	  CONFIG_FILES=$(subdir)/$@ $(SHELL) ./config.status
config.h: stamp-h
	@if test ! -f $@; then \
		rm -f stamp-h; \
		$(MAKE) stamp-h; \
	else :; fi
stamp-h: $(srcdir)/config.h.in $(top_builddir)/config.status
	@rm -f stamp-h stamp-hT
	@echo timestamp > stamp-hT 2> /dev/null
	cd $(top_builddir) \
	  && CONFIG_FILES= CONFIG_HEADERS=src/config.h \
	     $(SHELL) ./config.status
	@mv stamp-hT stamp-h
$(srcdir)/config.h.in:  $(srcdir)/./stamp-h.in
	@if test ! -f $@; then \
		rm -f $(srcdir)/./stamp-h.in; \
		$(MAKE) $(srcdir)/./stamp-h.in; \
	else :; fi
$(srcdir)/./stamp-h.in: $(top_srcdir)/configure.ac $(ACLOCAL_M4) 
	@rm -f $(srcdir)/./stamp-h.in $(srcdir)/./stamp-h.inT
	@echo timestamp > $(srcdir)/./stamp-h.inT 2> /dev/null
	cd $(top_srcdir) && $(AUTOHEADER)
	@mv $(srcdir)/./stamp-h.inT $(srcdir)/./stamp-h.in

distclean-hdr:
	-rm -f config.h
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo $$p1|sed '$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
openglad$(EXEEXT): $(openglad_OBJECTS) $(openglad_DEPENDENCIES) 
	@rm -f openglad$(EXEEXT)
	$(CXXLINK) $(openglad_LDFLAGS) $(openglad_OBJECTS) $(openglad_LDADD) $(LIBS)
openscen-scen.$(OBJEXT): scen.cpp
openscen-effect.$(OBJEXT): effect.cpp
openscen-game.$(OBJEXT): game.cpp
openscen-gladpack.$(OBJEXT): gladpack.cpp
openscen-graphlib.$(OBJEXT): graphlib.cpp
openscen-guy.$(OBJEXT): guy.cpp
openscen-help.$(OBJEXT): help.cpp
openscen-input.$(OBJEXT): input.cpp
openscen-intro.$(OBJEXT): intro.cpp
openscen-living.$(OBJEXT): living.cpp
openscen-loader.$(OBJEXT): loader.cpp
openscen-obmap.$(OBJEXT): obmap.cpp
openscen-pal32.$(OBJEXT): pal32.cpp
openscen-parser.$(OBJEXT): parser.cpp
openscen-pixie.$(OBJEXT): pixie.cpp
openscen-pixien.$(OBJEXT): pixien.cpp
openscen-radar.$(OBJEXT): radar.cpp
openscen-screen.$(OBJEXT): screen.cpp
openscen-smooth.$(OBJEXT): smooth.cpp
openscen-sound.$(OBJEXT): sound.cpp
openscen-stats.$(OBJEXT): stats.cpp
openscen-text.$(OBJEXT): text.cpp
openscen-treasure.$(OBJEXT): treasure.cpp
openscen-video.$(OBJEXT): video.cpp
openscen-view.$(OBJEXT): view.cpp
openscen-walker.$(OBJEXT): walker.cpp
openscen-weap.$(OBJEXT): weap.cpp
openscen-sai2x.$(OBJEXT): sai2x.cpp
openscen-util.$(OBJEXT): util.cpp
openscen$(EXEEXT): $(openscen_OBJECTS) $(openscen_DEPENDENCIES) 
	@rm -f openscen$(EXEEXT)
	$(CXXLINK) $(openscen_LDFLAGS) $(openscen_OBJECTS) $(openscen_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/button.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/effect.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/game.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/glad.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/gladpack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/graphlib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/guy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/help.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/intro.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/living.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/loader.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/obmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-effect.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-game.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-gladpack.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-graphlib.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-guy.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-help.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-input.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-intro.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-living.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-loader.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-obmap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-pal32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-parser.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-pixie.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-pixien.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-radar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-sai2x.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-scen.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-screen.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-smooth.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-sound.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-stats.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-text.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-treasure.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-video.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-view.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-walker.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/openscen-weap.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/pal32.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/parser.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/picker.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/pixie.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/pixien.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/radar.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/sai2x.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/screen.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/smooth.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/sound.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/stats.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/text.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/treasure.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/util.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/video.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/view.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/walker.Po@am__quote@
@AMDEP_TRUE@@am__include@ @am__quote@$(DEPDIR)/weap.Po@am__quote@

distclean-depend:
	-rm -rf $(DEPDIR)

.cpp.o:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `test -f $< || echo '$(srcdir)/'`$<

.cpp.obj:
@AMDEP_TRUE@	source='$<' object='$@' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXXCOMPILE) -c -o $@ `cygpath -w $<`

openscen-scen.o: scen.cpp
@AMDEP_TRUE@	source='scen.cpp' object='openscen-scen.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-scen.Po' tmpdepfile='$(DEPDIR)/openscen-scen.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-scen.o `test -f scen.cpp || echo '$(srcdir)/'`scen.cpp

openscen-scen.obj: scen.cpp
@AMDEP_TRUE@	source='scen.cpp' object='openscen-scen.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-scen.Po' tmpdepfile='$(DEPDIR)/openscen-scen.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-scen.obj `cygpath -w scen.cpp`

openscen-effect.o: effect.cpp
@AMDEP_TRUE@	source='effect.cpp' object='openscen-effect.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-effect.Po' tmpdepfile='$(DEPDIR)/openscen-effect.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-effect.o `test -f effect.cpp || echo '$(srcdir)/'`effect.cpp

openscen-effect.obj: effect.cpp
@AMDEP_TRUE@	source='effect.cpp' object='openscen-effect.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-effect.Po' tmpdepfile='$(DEPDIR)/openscen-effect.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-effect.obj `cygpath -w effect.cpp`

openscen-game.o: game.cpp
@AMDEP_TRUE@	source='game.cpp' object='openscen-game.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-game.Po' tmpdepfile='$(DEPDIR)/openscen-game.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-game.o `test -f game.cpp || echo '$(srcdir)/'`game.cpp

openscen-game.obj: game.cpp
@AMDEP_TRUE@	source='game.cpp' object='openscen-game.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-game.Po' tmpdepfile='$(DEPDIR)/openscen-game.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-game.obj `cygpath -w game.cpp`

openscen-gladpack.o: gladpack.cpp
@AMDEP_TRUE@	source='gladpack.cpp' object='openscen-gladpack.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-gladpack.Po' tmpdepfile='$(DEPDIR)/openscen-gladpack.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-gladpack.o `test -f gladpack.cpp || echo '$(srcdir)/'`gladpack.cpp

openscen-gladpack.obj: gladpack.cpp
@AMDEP_TRUE@	source='gladpack.cpp' object='openscen-gladpack.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-gladpack.Po' tmpdepfile='$(DEPDIR)/openscen-gladpack.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-gladpack.obj `cygpath -w gladpack.cpp`

openscen-graphlib.o: graphlib.cpp
@AMDEP_TRUE@	source='graphlib.cpp' object='openscen-graphlib.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-graphlib.Po' tmpdepfile='$(DEPDIR)/openscen-graphlib.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-graphlib.o `test -f graphlib.cpp || echo '$(srcdir)/'`graphlib.cpp

openscen-graphlib.obj: graphlib.cpp
@AMDEP_TRUE@	source='graphlib.cpp' object='openscen-graphlib.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-graphlib.Po' tmpdepfile='$(DEPDIR)/openscen-graphlib.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-graphlib.obj `cygpath -w graphlib.cpp`

openscen-guy.o: guy.cpp
@AMDEP_TRUE@	source='guy.cpp' object='openscen-guy.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-guy.Po' tmpdepfile='$(DEPDIR)/openscen-guy.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-guy.o `test -f guy.cpp || echo '$(srcdir)/'`guy.cpp

openscen-guy.obj: guy.cpp
@AMDEP_TRUE@	source='guy.cpp' object='openscen-guy.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-guy.Po' tmpdepfile='$(DEPDIR)/openscen-guy.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-guy.obj `cygpath -w guy.cpp`

openscen-help.o: help.cpp
@AMDEP_TRUE@	source='help.cpp' object='openscen-help.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-help.Po' tmpdepfile='$(DEPDIR)/openscen-help.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-help.o `test -f help.cpp || echo '$(srcdir)/'`help.cpp

openscen-help.obj: help.cpp
@AMDEP_TRUE@	source='help.cpp' object='openscen-help.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-help.Po' tmpdepfile='$(DEPDIR)/openscen-help.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-help.obj `cygpath -w help.cpp`

openscen-input.o: input.cpp
@AMDEP_TRUE@	source='input.cpp' object='openscen-input.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-input.Po' tmpdepfile='$(DEPDIR)/openscen-input.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-input.o `test -f input.cpp || echo '$(srcdir)/'`input.cpp

openscen-input.obj: input.cpp
@AMDEP_TRUE@	source='input.cpp' object='openscen-input.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-input.Po' tmpdepfile='$(DEPDIR)/openscen-input.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-input.obj `cygpath -w input.cpp`

openscen-intro.o: intro.cpp
@AMDEP_TRUE@	source='intro.cpp' object='openscen-intro.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-intro.Po' tmpdepfile='$(DEPDIR)/openscen-intro.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-intro.o `test -f intro.cpp || echo '$(srcdir)/'`intro.cpp

openscen-intro.obj: intro.cpp
@AMDEP_TRUE@	source='intro.cpp' object='openscen-intro.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-intro.Po' tmpdepfile='$(DEPDIR)/openscen-intro.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-intro.obj `cygpath -w intro.cpp`

openscen-living.o: living.cpp
@AMDEP_TRUE@	source='living.cpp' object='openscen-living.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-living.Po' tmpdepfile='$(DEPDIR)/openscen-living.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-living.o `test -f living.cpp || echo '$(srcdir)/'`living.cpp

openscen-living.obj: living.cpp
@AMDEP_TRUE@	source='living.cpp' object='openscen-living.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-living.Po' tmpdepfile='$(DEPDIR)/openscen-living.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-living.obj `cygpath -w living.cpp`

openscen-loader.o: loader.cpp
@AMDEP_TRUE@	source='loader.cpp' object='openscen-loader.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-loader.Po' tmpdepfile='$(DEPDIR)/openscen-loader.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-loader.o `test -f loader.cpp || echo '$(srcdir)/'`loader.cpp

openscen-loader.obj: loader.cpp
@AMDEP_TRUE@	source='loader.cpp' object='openscen-loader.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-loader.Po' tmpdepfile='$(DEPDIR)/openscen-loader.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-loader.obj `cygpath -w loader.cpp`

openscen-obmap.o: obmap.cpp
@AMDEP_TRUE@	source='obmap.cpp' object='openscen-obmap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-obmap.Po' tmpdepfile='$(DEPDIR)/openscen-obmap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-obmap.o `test -f obmap.cpp || echo '$(srcdir)/'`obmap.cpp

openscen-obmap.obj: obmap.cpp
@AMDEP_TRUE@	source='obmap.cpp' object='openscen-obmap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-obmap.Po' tmpdepfile='$(DEPDIR)/openscen-obmap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-obmap.obj `cygpath -w obmap.cpp`

openscen-pal32.o: pal32.cpp
@AMDEP_TRUE@	source='pal32.cpp' object='openscen-pal32.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pal32.Po' tmpdepfile='$(DEPDIR)/openscen-pal32.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pal32.o `test -f pal32.cpp || echo '$(srcdir)/'`pal32.cpp

openscen-pal32.obj: pal32.cpp
@AMDEP_TRUE@	source='pal32.cpp' object='openscen-pal32.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pal32.Po' tmpdepfile='$(DEPDIR)/openscen-pal32.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pal32.obj `cygpath -w pal32.cpp`

openscen-parser.o: parser.cpp
@AMDEP_TRUE@	source='parser.cpp' object='openscen-parser.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-parser.Po' tmpdepfile='$(DEPDIR)/openscen-parser.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-parser.o `test -f parser.cpp || echo '$(srcdir)/'`parser.cpp

openscen-parser.obj: parser.cpp
@AMDEP_TRUE@	source='parser.cpp' object='openscen-parser.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-parser.Po' tmpdepfile='$(DEPDIR)/openscen-parser.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-parser.obj `cygpath -w parser.cpp`

openscen-pixie.o: pixie.cpp
@AMDEP_TRUE@	source='pixie.cpp' object='openscen-pixie.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pixie.Po' tmpdepfile='$(DEPDIR)/openscen-pixie.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixie.o `test -f pixie.cpp || echo '$(srcdir)/'`pixie.cpp

openscen-pixie.obj: pixie.cpp
@AMDEP_TRUE@	source='pixie.cpp' object='openscen-pixie.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pixie.Po' tmpdepfile='$(DEPDIR)/openscen-pixie.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixie.obj `cygpath -w pixie.cpp`

openscen-pixien.o: pixien.cpp
@AMDEP_TRUE@	source='pixien.cpp' object='openscen-pixien.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pixien.Po' tmpdepfile='$(DEPDIR)/openscen-pixien.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixien.o `test -f pixien.cpp || echo '$(srcdir)/'`pixien.cpp

openscen-pixien.obj: pixien.cpp
@AMDEP_TRUE@	source='pixien.cpp' object='openscen-pixien.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-pixien.Po' tmpdepfile='$(DEPDIR)/openscen-pixien.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-pixien.obj `cygpath -w pixien.cpp`

openscen-radar.o: radar.cpp
@AMDEP_TRUE@	source='radar.cpp' object='openscen-radar.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-radar.Po' tmpdepfile='$(DEPDIR)/openscen-radar.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-radar.o `test -f radar.cpp || echo '$(srcdir)/'`radar.cpp

openscen-radar.obj: radar.cpp
@AMDEP_TRUE@	source='radar.cpp' object='openscen-radar.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-radar.Po' tmpdepfile='$(DEPDIR)/openscen-radar.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-radar.obj `cygpath -w radar.cpp`

openscen-screen.o: screen.cpp
@AMDEP_TRUE@	source='screen.cpp' object='openscen-screen.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-screen.Po' tmpdepfile='$(DEPDIR)/openscen-screen.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-screen.o `test -f screen.cpp || echo '$(srcdir)/'`screen.cpp

openscen-screen.obj: screen.cpp
@AMDEP_TRUE@	source='screen.cpp' object='openscen-screen.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-screen.Po' tmpdepfile='$(DEPDIR)/openscen-screen.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-screen.obj `cygpath -w screen.cpp`

openscen-smooth.o: smooth.cpp
@AMDEP_TRUE@	source='smooth.cpp' object='openscen-smooth.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-smooth.Po' tmpdepfile='$(DEPDIR)/openscen-smooth.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-smooth.o `test -f smooth.cpp || echo '$(srcdir)/'`smooth.cpp

openscen-smooth.obj: smooth.cpp
@AMDEP_TRUE@	source='smooth.cpp' object='openscen-smooth.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-smooth.Po' tmpdepfile='$(DEPDIR)/openscen-smooth.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-smooth.obj `cygpath -w smooth.cpp`

openscen-sound.o: sound.cpp
@AMDEP_TRUE@	source='sound.cpp' object='openscen-sound.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-sound.Po' tmpdepfile='$(DEPDIR)/openscen-sound.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sound.o `test -f sound.cpp || echo '$(srcdir)/'`sound.cpp

openscen-sound.obj: sound.cpp
@AMDEP_TRUE@	source='sound.cpp' object='openscen-sound.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-sound.Po' tmpdepfile='$(DEPDIR)/openscen-sound.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sound.obj `cygpath -w sound.cpp`

openscen-stats.o: stats.cpp
@AMDEP_TRUE@	source='stats.cpp' object='openscen-stats.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-stats.Po' tmpdepfile='$(DEPDIR)/openscen-stats.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-stats.o `test -f stats.cpp || echo '$(srcdir)/'`stats.cpp

openscen-stats.obj: stats.cpp
@AMDEP_TRUE@	source='stats.cpp' object='openscen-stats.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-stats.Po' tmpdepfile='$(DEPDIR)/openscen-stats.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-stats.obj `cygpath -w stats.cpp`

openscen-text.o: text.cpp
@AMDEP_TRUE@	source='text.cpp' object='openscen-text.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-text.Po' tmpdepfile='$(DEPDIR)/openscen-text.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-text.o `test -f text.cpp || echo '$(srcdir)/'`text.cpp

openscen-text.obj: text.cpp
@AMDEP_TRUE@	source='text.cpp' object='openscen-text.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-text.Po' tmpdepfile='$(DEPDIR)/openscen-text.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-text.obj `cygpath -w text.cpp`

openscen-treasure.o: treasure.cpp
@AMDEP_TRUE@	source='treasure.cpp' object='openscen-treasure.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-treasure.Po' tmpdepfile='$(DEPDIR)/openscen-treasure.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-treasure.o `test -f treasure.cpp || echo '$(srcdir)/'`treasure.cpp

openscen-treasure.obj: treasure.cpp
@AMDEP_TRUE@	source='treasure.cpp' object='openscen-treasure.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-treasure.Po' tmpdepfile='$(DEPDIR)/openscen-treasure.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-treasure.obj `cygpath -w treasure.cpp`

openscen-video.o: video.cpp
@AMDEP_TRUE@	source='video.cpp' object='openscen-video.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-video.Po' tmpdepfile='$(DEPDIR)/openscen-video.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-video.o `test -f video.cpp || echo '$(srcdir)/'`video.cpp

openscen-video.obj: video.cpp
@AMDEP_TRUE@	source='video.cpp' object='openscen-video.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-video.Po' tmpdepfile='$(DEPDIR)/openscen-video.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-video.obj `cygpath -w video.cpp`

openscen-view.o: view.cpp
@AMDEP_TRUE@	source='view.cpp' object='openscen-view.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-view.Po' tmpdepfile='$(DEPDIR)/openscen-view.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-view.o `test -f view.cpp || echo '$(srcdir)/'`view.cpp

openscen-view.obj: view.cpp
@AMDEP_TRUE@	source='view.cpp' object='openscen-view.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-view.Po' tmpdepfile='$(DEPDIR)/openscen-view.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-view.obj `cygpath -w view.cpp`

openscen-walker.o: walker.cpp
@AMDEP_TRUE@	source='walker.cpp' object='openscen-walker.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-walker.Po' tmpdepfile='$(DEPDIR)/openscen-walker.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-walker.o `test -f walker.cpp || echo '$(srcdir)/'`walker.cpp

openscen-walker.obj: walker.cpp
@AMDEP_TRUE@	source='walker.cpp' object='openscen-walker.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-walker.Po' tmpdepfile='$(DEPDIR)/openscen-walker.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-walker.obj `cygpath -w walker.cpp`

openscen-weap.o: weap.cpp
@AMDEP_TRUE@	source='weap.cpp' object='openscen-weap.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-weap.Po' tmpdepfile='$(DEPDIR)/openscen-weap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-weap.o `test -f weap.cpp || echo '$(srcdir)/'`weap.cpp

openscen-weap.obj: weap.cpp
@AMDEP_TRUE@	source='weap.cpp' object='openscen-weap.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-weap.Po' tmpdepfile='$(DEPDIR)/openscen-weap.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-weap.obj `cygpath -w weap.cpp`

openscen-sai2x.o: sai2x.cpp
@AMDEP_TRUE@	source='sai2x.cpp' object='openscen-sai2x.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-sai2x.Po' tmpdepfile='$(DEPDIR)/openscen-sai2x.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sai2x.o `test -f sai2x.cpp || echo '$(srcdir)/'`sai2x.cpp

openscen-sai2x.obj: sai2x.cpp
@AMDEP_TRUE@	source='sai2x.cpp' object='openscen-sai2x.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-sai2x.Po' tmpdepfile='$(DEPDIR)/openscen-sai2x.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-sai2x.obj `cygpath -w sai2x.cpp`

openscen-util.o: util.cpp
@AMDEP_TRUE@	source='util.cpp' object='openscen-util.o' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-util.Po' tmpdepfile='$(DEPDIR)/openscen-util.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-util.o `test -f util.cpp || echo '$(srcdir)/'`util.cpp

openscen-util.obj: util.cpp
@AMDEP_TRUE@	source='util.cpp' object='openscen-util.obj' libtool=no @AMDEPBACKSLASH@
@AMDEP_TRUE@	depfile='$(DEPDIR)/openscen-util.Po' tmpdepfile='$(DEPDIR)/openscen-util.TPo' @AMDEPBACKSLASH@
@AMDEP_TRUE@	$(CXXDEPMODE) $(depcomp) @AMDEPBACKSLASH@
	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(openscen_CXXFLAGS) $(CXXFLAGS) -c -o openscen-util.obj `cygpath -w util.cpp`
CXXDEPMODE = @CXXDEPMODE@
uninstall-info-am:

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique $(LISP)

TAGS:  $(HEADERS) $(SOURCES) config.h.in $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)config.h.in$$unique$(LISP)$$tags" \
	  || etags $(ETAGS_ARGS) $$tags config.h.in $$unique $(LISP)

GTAGS:
	here=`CDPATH=: && cd $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH

DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  if test -f $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    $(mkinstalldirs) "$(distdir)/$$dir"; \
	  fi; \
	  if test -d $$d/$$file; then \
	    cp -pR $$d/$$file $(distdir) \
	    || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS) config.h

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES) stamp-h stamp-h[0-9]*

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic distclean distclean-compile distclean-depend \
	distclean-generic distclean-hdr distclean-tags distdir dvi \
	dvi-am info info-am install install-am install-binPROGRAMS \
	install-data install-data-am install-exec install-exec-am \
	install-info install-info-am install-man install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
